#!/usr/bin/env python3
"""
üöÄ LANCEUR COMPLET DU PROJET MS-RCPSP
=====================================

Ce script ex√©cute automatiquement tout le projet :
- G√©n√©ration des donn√©es de makespan
- Entra√Ænement du mod√®le ML
- Tests et analyses
- G√©n√©ration des graphiques
- Rapport final
"""

import os
import sys
import subprocess
import time
from datetime import datetime

def print_banner():
    """Affiche la banni√®re du projet"""
    print("üöÄ" * 30)
    print("üéØ LANCEUR COMPLET MS-RCPSP PROJECT")
    print("üöÄ" * 30)
    print(f"üìÖ D√©marrage: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

def print_step(step_num, title, description=""):
    """Affiche l'√©tape en cours"""
    print(f"\n{'='*60}")
    print(f"üìã √âTAPE {step_num}: {title}")
    if description:
        print(f"   {description}")
    print(f"{'='*60}")

def run_command(command, description, show_output=True):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"‚öôÔ∏è  {description}")
    print(f"üíª Commande: {command}")
    print("-" * 40)
    
    start_time = time.time()
    
    try:
        if show_output:
            result = subprocess.run(command, shell=True, check=True, 
                                  capture_output=False, text=True)
        else:
            result = subprocess.run(command, shell=True, check=True, 
                                  capture_output=True, text=True)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚úÖ Succ√®s en {duration:.1f}s")
        return True, result
        
    except subprocess.CalledProcessError as e:
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"‚ùå Erreur apr√®s {duration:.1f}s")
        print(f"Code d'erreur: {e.returncode}")
        if hasattr(e, 'stdout') and e.stdout:
            print(f"Sortie: {e.stdout}")
        if hasattr(e, 'stderr') and e.stderr:
            print(f"Erreur: {e.stderr}")
        
        return False, e

def check_dependencies():
    """V√©rifie que toutes les d√©pendances sont install√©es"""
    print_step(0, "V√âRIFICATION DES D√âPENDANCES")
    
    required_packages = ['numpy', 'scikit-learn', 'matplotlib', 'pandas', 'seaborn']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} manquant")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\nüì¶ Installation des packages manquants...")
        for package in missing_packages:
            success, _ = run_command(f"pip install {package}", 
                                   f"Installation de {package}", show_output=False)
            if not success:
                print(f"‚ùå Impossible d'installer {package}")
                return False
    
    print("‚úÖ Toutes les d√©pendances sont disponibles")
    return True

def generate_makespan_data():
    """G√©n√®re les donn√©es de makespan"""
    print_step(1, "G√âN√âRATION DES DONN√âES MAKESPAN", 
               "Calcul des makespans pour l'entra√Ænement ML")
    
    success, _ = run_command("python3 makespan_calculator.py", 
                           "G√©n√©ration des donn√©es makespan")
    return success

def train_ml_model():
    """Entra√Æne le mod√®le ML"""
    print_step(2, "ENTRA√éNEMENT DU MOD√àLE ML", 
               "Cr√©ation du classificateur Binary Relevance")
    
    success, _ = run_command("python3 binary_relevance_msrcpsp.py", 
                           "Entra√Ænement du mod√®le ML")
    return success

def run_mass_tests():
    """Ex√©cute les tests massifs"""
    print_step(3, "TESTS MASSIFS", 
               "Tests sur plusieurs instances pour valider le syst√®me")
    
    success, _ = run_command("python3 solution_finale.py", 
                           "Ex√©cution des tests massifs")
    return success

def create_visualizations():
    """Cr√©e les visualisations et graphiques"""
    print_step(4, "CR√âATION DES GRAPHIQUES", 
               "G√©n√©ration des visualisations pour l'analyse")
    
    # Cr√©er les graphiques automatiquement (option 4 = tout faire)
    success, _ = run_command("echo '4' | python3 nettoyage_et_graphiques.py", 
                           "Cr√©ation des graphiques et nettoyage")
    return success

def generate_detailed_analysis():
    """G√©n√®re l'analyse d√©taill√©e"""
    print_step(5, "ANALYSE D√âTAILL√âE", 
               "G√©n√©ration du rapport d'analyse d√©taill√©")
    
    # Analyser un r√©sultat sp√©cifique avec graphiques (option 1)
    success, _ = run_command("echo '1' | python3 detail_resultat_ml.py", 
                           "Analyse d√©taill√©e avec graphiques")
    return success

def show_project_status():
    """Affiche le statut final du projet"""
    print_step(6, "RAPPORT FINAL", 
               "V√©rification de tous les r√©sultats g√©n√©r√©s")
    
    # V√©rifier les dossiers et fichiers cr√©√©s
    directories_to_check = [
        "./resultats",
        "./resultats_ml", 
        "./resultats/graphiques",
        "./resultats/makespan_details"
    ]
    
    files_to_check = [
        "./resultats/binary_relevance_model.pkl",
        "./resultats/graphiques/analyse_makespan.png",
        "./resultats/graphiques/analyse_ml.png",
        "./resultats/graphiques/rapport_performance_ia.json"
    ]
    
    print("üìÅ V√âRIFICATION DES DOSSIERS:")
    all_dirs_ok = True
    for directory in directories_to_check:
        if os.path.exists(directory):
            count = len([f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))])
            print(f"   ‚úÖ {directory} ({count} fichiers)")
        else:
            print(f"   ‚ùå {directory} manquant")
            all_dirs_ok = False
    
    print("\nüìÑ V√âRIFICATION DES FICHIERS CL√âS:")
    all_files_ok = True
    for file_path in files_to_check:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"   ‚úÖ {file_path} ({size} bytes)")
        else:
            print(f"   ‚ùå {file_path} manquant")
            all_files_ok = False
    
    # Compter les r√©sultats ML
    ml_count = 0
    if os.path.exists("./resultats_ml"):
        ml_count = len([f for f in os.listdir("./resultats_ml") if f.endswith('.json')])
    
    print(f"\nüìä R√âSUM√â FINAL:")
    print(f"   ü§ñ R√©sultats ML g√©n√©r√©s: {ml_count}")
    print(f"   üìÅ Dossiers: {'‚úÖ' if all_dirs_ok else '‚ùå'}")
    print(f"   üìÑ Fichiers: {'‚úÖ' if all_files_ok else '‚ùå'}")
    
    if all_dirs_ok and all_files_ok and ml_count > 0:
        print(f"\nüéä PROJET COMPL√àTEMENT OP√âRATIONNEL ! üéä")
        return True
    else:
        print(f"\n‚ö†Ô∏è  Projet partiellement op√©rationnel")
        return False

def show_usage_instructions():
    """Affiche les instructions d'utilisation"""
    print("\n" + "="*60)
    print("üí° COMMENT UTILISER LE PROJET:")
    print("="*60)
    print("1Ô∏è‚É£  Pour l'assistant ML simple:")
    print("   python3 assistant_ml.py")
    print()
    print("2Ô∏è‚É£  Pour une d√©monstration compl√®te:")
    print("   python3 demo_ml_integration.py")
    print()
    print("3Ô∏è‚É£  Pour l'analyse d√©taill√©e:")
    print("   python3 detail_resultat_ml.py")
    print()
    print("4Ô∏è‚É£  Pour voir les algorithmes ML:")
    print("   python3 explication_algorithme_ml.py")
    print()
    print("5Ô∏è‚É£  Pour des tests massifs:")
    print("   python3 solution_finale.py")
    print()
    print("üìÅ R√âSULTATS DANS:")
    print("   ‚Ä¢ ./resultats/graphiques/ (images)")
    print("   ‚Ä¢ ./resultats_ml/ (r√©sultats JSON)")
    print("   ‚Ä¢ ./resultats/ (mod√®les et donn√©es)")

def main():
    """Fonction principale"""
    print_banner()
    
    start_time = time.time()
    steps_completed = 0
    total_steps = 6
    
    try:
        # √âtape 0: V√©rifier les d√©pendances
        if not check_dependencies():
            print("‚ùå Impossible de continuer sans les d√©pendances")
            sys.exit(1)
        
        # √âtape 1: G√©n√©rer les donn√©es makespan
        if generate_makespan_data():
            steps_completed += 1
            print("‚úÖ Donn√©es makespan g√©n√©r√©es")
        else:
            print("‚ö†Ô∏è  Probl√®me avec la g√©n√©ration des donn√©es makespan")
        
        # √âtape 2: Entra√Æner le mod√®le ML
        if train_ml_model():
            steps_completed += 1
            print("‚úÖ Mod√®le ML entra√Æn√©")
        else:
            print("‚ö†Ô∏è  Probl√®me avec l'entra√Ænement ML")
        
        # √âtape 3: Tests massifs
        if run_mass_tests():
            steps_completed += 1
            print("‚úÖ Tests massifs r√©alis√©s")
        else:
            print("‚ö†Ô∏è  Probl√®me avec les tests massifs")
        
        # √âtape 4: Cr√©er les visualisations
        if create_visualizations():
            steps_completed += 1
            print("‚úÖ Graphiques cr√©√©s")
        else:
            print("‚ö†Ô∏è  Probl√®me avec la cr√©ation des graphiques")
        
        # √âtape 5: Analyse d√©taill√©e
        if generate_detailed_analysis():
            steps_completed += 1
            print("‚úÖ Analyse d√©taill√©e g√©n√©r√©e")
        else:
            print("‚ö†Ô∏è  Probl√®me avec l'analyse d√©taill√©e")
        
        # √âtape 6: Rapport final
        if show_project_status():
            steps_completed += 1
            print("‚úÖ Projet compl√®tement op√©rationnel")
        else:
            print("‚ö†Ô∏è  Projet partiellement fonctionnel")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Arr√™t demand√© par l'utilisateur")
        sys.exit(1)
    
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)
    
    finally:
        # R√©sum√© final
        end_time = time.time()
        total_duration = end_time - start_time
        
        print(f"\n{'='*60}")
        print(f"üèÅ EX√âCUTION TERMIN√âE")
        print(f"{'='*60}")
        print(f"‚è±Ô∏è  Dur√©e totale: {total_duration:.1f} secondes")
        print(f"‚úÖ √âtapes r√©ussies: {steps_completed}/{total_steps}")
        print(f"üìä Taux de succ√®s: {(steps_completed/total_steps)*100:.1f}%")
        
        if steps_completed == total_steps:
            print(f"\nüéâ F√âLICITATIONS ! PROJET 100% OP√âRATIONNEL ! üéâ")
            show_usage_instructions()
        else:
            print(f"\n‚ö†Ô∏è  Projet partiellement fonctionnel ({steps_completed}/{total_steps} √©tapes)")
            print(f"üí° Vous pouvez relancer le script pour corriger les probl√®mes")

if __name__ == "__main__":
    main()

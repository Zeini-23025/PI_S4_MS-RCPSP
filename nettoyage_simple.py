#!/usr/bin/env python3
"""
üßπ NETTOYAGE SIMPLE - SUPPRIMER FICHIERS NON N√âCESSAIRES
========================================================

Ce script supprime uniquement les fichiers redondants et obsol√®tes
"""

import os

def supprimer_fichiers_inutiles():
    """Supprime les fichiers redondants et non n√©cessaires"""
    
    print("üßπ SUPPRESSION DES FICHIERS NON N√âCESSAIRES")
    print("=" * 60)
    
    # Fichiers √† supprimer (redondants ou obsol√®tes)
    fichiers_a_supprimer = [
        # Fichiers de test redondants
        "test_automatique.py",
        "test_verification_simple.py",
        
        # D√©mos redondants
        "demo.py",
        "demo_complete_system.py",
        "exemple_ml.py",
        
        # Versions obsol√®tes
        "msrcpsp_optimized.py",
        "improved_scheduler.py",
        "diagnostic.py",
        
        # Utilitaires int√©gr√©s ailleurs
        "lire_pkl.py",
        
        # Fichiers temporaires ou de d√©veloppement
        "test_batch_ml.py",  # Remplac√© par test_massif_projets.py
        
        # Doublons de scripts
        "nettoyage_et_graphiques.py",  # Ce script m√™me apr√®s utilisation
    ]
    
    # Fichiers ESSENTIELS √† garder absolument
    fichiers_essentiels = [
        "msrcpsp_final.py",                # ‚≠ê Core scheduler
        "binary_relevance_msrcpsp.py",     # ‚≠ê Core ML system
        "makespan_calculator.py",          # ‚≠ê Data generator
        "assistant_ml.py",                 # ‚≠ê Simple interface
        "solution_finale.py",              # ‚≠ê Diagnostic tool
        "explication_algorithme_ml.py",    # ‚≠ê Results viewer
        "detail_resultat_ml.py",           # ‚≠ê Detailed analysis
        "test_massif_projets.py",          # ‚≠ê Mass testing
        "demo_explication_simple.py",      # ‚≠ê Simple demo
        "demo_ml_integration.py",          # ‚≠ê ML integration demo
        "msrcpsp_complete.py",             # ‚≠ê Batch processing
        "project.sh",                      # ‚≠ê Automation script
    ]
    
    print("üìã ANALYSE DES FICHIERS...")
    
    # Lister tous les fichiers Python
    all_python_files = [f for f in os.listdir('.') if f.endswith('.py')]
    
    print(f"üìÅ Trouv√© {len(all_python_files)} fichiers Python")
    print(f"üéØ {len(fichiers_essentiels)} fichiers essentiels √† garder")
    print(f"üóëÔ∏è  {len(fichiers_a_supprimer)} fichiers √† supprimer")
    
    # Confirmer avant suppression
    print(f"\n‚ö†Ô∏è  FICHIERS QUI SERONT SUPPRIM√âS:")
    fichiers_presents = []
    for fichier in fichiers_a_supprimer:
        if os.path.exists(fichier):
            print(f"   üóëÔ∏è  {fichier}")
            fichiers_presents.append(fichier)
        else:
            print(f"   ‚ùå {fichier} (d√©j√† absent)")
    
    if not fichiers_presents:
        print("‚úÖ Aucun fichier √† supprimer (d√©j√† nettoy√©)")
        return
    
    print(f"\nüìä {len(fichiers_presents)} fichiers seront supprim√©s")
    
    # Demander confirmation
    reponse = input("\n‚ùì Confirmer la suppression? (o/N): ").strip().lower()
    
    if reponse != 'o':
        print("üõë Suppression annul√©e")
        return
    
    # Proc√©der √† la suppression
    print(f"\nüîÑ SUPPRESSION EN COURS...")
    fichiers_supprimes = 0
    
    for fichier in fichiers_presents:
        try:
            os.remove(fichier)
            print(f"‚úÖ Supprim√©: {fichier}")
            fichiers_supprimes += 1
        except Exception as e:
            print(f"‚ùå Erreur suppression {fichier}: {e}")
    
    print(f"\nüéä NETTOYAGE TERMIN√â!")
    print(f"‚úÖ {fichiers_supprimes} fichiers supprim√©s")
    
    # Afficher les fichiers restants
    print(f"\nüìÅ FICHIERS PYTHON RESTANTS:")
    remaining_files = [f for f in os.listdir('.') if f.endswith('.py')]
    
    for f in sorted(remaining_files):
        if f in fichiers_essentiels:
            print(f"   ‚≠ê {f} (essentiel)")
        elif f == "nettoyage_simple.py":
            print(f"   üßπ {f} (script de nettoyage)")
        else:
            print(f"   ‚ùì {f} (√† v√©rifier)")
    
    print(f"\nüìä R√âSUM√â:")
    print(f"   üìÅ Fichiers Python restants: {len(remaining_files)}")
    print(f"   ‚≠ê Fichiers essentiels: {len([f for f in remaining_files if f in fichiers_essentiels])}")
    
    print(f"\nüí° FICHIERS ESSENTIELS CONSERV√âS:")
    essential_kept = [f for f in remaining_files if f in fichiers_essentiels]
    for f in essential_kept:
        if f == "msrcpsp_final.py":
            print(f"   ‚≠ê {f} - Scheduler principal")
        elif f == "binary_relevance_msrcpsp.py":
            print(f"   ‚≠ê {f} - Syst√®me ML principal")
        elif f == "assistant_ml.py":
            print(f"   ‚≠ê {f} - Interface simple")
        elif f == "solution_finale.py":
            print(f"   ‚≠ê {f} - Diagnostic et test")
        elif f == "test_massif_projets.py":
            print(f"   ‚≠ê {f} - Test massif")
        else:
            print(f"   ‚≠ê {f}")

def supprimer_autres_fichiers():
    """Supprime d'autres fichiers non essentiels"""
    
    print(f"\nüßπ NETTOYAGE DES AUTRES FICHIERS")
    print("=" * 50)
    
    # Autres fichiers/dossiers non n√©cessaires
    autres_a_supprimer = [
        "__pycache__",  # Cache Python
        "*.pyc",        # Fichiers compil√©s Python
        ".pytest_cache", # Cache pytest
        "test_verification_simple.py",
        "R√âPONSE_QUESTIONS_ML.md",  # Redondant avec documentation
    ]
    
    print("üîç Recherche d'autres fichiers √† nettoyer...")
    
    # Supprimer __pycache__
    if os.path.exists("__pycache__"):
        try:
            import shutil
            shutil.rmtree("__pycache__")
            print("‚úÖ Supprim√©: __pycache__/")
        except Exception as e:
            print(f"‚ùå Erreur suppression __pycache__: {e}")
    
    # Supprimer les fichiers .pyc
    import glob
    pyc_files = glob.glob("*.pyc")
    for pyc_file in pyc_files:
        try:
            os.remove(pyc_file)
            print(f"‚úÖ Supprim√©: {pyc_file}")
        except Exception as e:
            print(f"‚ùå Erreur suppression {pyc_file}: {e}")
    
    print("‚úÖ Nettoyage des autres fichiers termin√©")

def main():
    """Fonction principale"""
    
    print("üßπ NETTOYAGE SIMPLE DU PROJET MS-RCPSP")
    print("=" * 70)
    
    print("Ce script va supprimer uniquement les fichiers non n√©cessaires")
    print("et garder tous les fichiers essentiels pour le fonctionnement.")
    
    # Nettoyage principal
    supprimer_fichiers_inutiles()
    
    # Nettoyage suppl√©mentaire
    supprimer_autres_fichiers()
    
    print(f"\nüéä NETTOYAGE COMPLET TERMIN√â!")
    print("=" * 40)
    print("‚úÖ Projet nettoy√© et optimis√©")
    print("‚úÖ Tous les fichiers essentiels conserv√©s")
    print("‚úÖ Fonctionnalit√©s intactes")
    
    print(f"\nüöÄ POUR UTILISER LE SYST√àME:")
    print("   python3 assistant_ml.py              # Interface simple")
    print("   python3 binary_relevance_msrcpsp.py  # Interface avanc√©e")
    print("   python3 solution_finale.py           # Diagnostic complet")
    print("   ./project.sh                         # Automatisation compl√®te")

if __name__ == "__main__":
    main()

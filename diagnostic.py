#!/usr/bin/env python3
"""
Script de diagnostic pour analyser pourquoi les algorithmes donnent les m√™mes r√©sultats
"""

import os
from msrcpsp_final import MSRCPSPParser, MSRCPSPScheduler


def diagnose_instance_issue(instance_path: str):
    """Diagnostic d√©taill√© d'une instance"""
    print(f"\n{'='*60}")
    print(f"DIAGNOSTIC: {os.path.basename(instance_path)}")
    print(f"{'='*60}")
    
    try:
        # Parser l'instance
        instance = MSRCPSPParser.parse_file(instance_path)
        scheduler = MSRCPSPScheduler(instance)
        
        # Statistiques de base
        print(f"üìä Activit√©s: {instance.num_activities}")
        print(f"üìä Ressources: {instance.num_resources}")
        print(f"üìä Comp√©tences: {instance.num_skills}")
        print(f"üìä Deadline: {instance.level_deadline}")
        
        # Analyser les activit√©s
        total_duration = sum(a.duration for a in instance.activities)
        zero_duration = sum(1 for a in instance.activities if a.duration == 0)
        print(f"üìä Dur√©e totale: {total_duration}")
        print(f"üìä Activit√©s dur√©e 0: {zero_duration}")
        
        # Analyser les contraintes de pr√©c√©dence
        total_prec = sum(len(a.predecessors) for a in instance.activities)
        print(f"üìä Contraintes de pr√©c√©dence: {total_prec}")
        
        # Analyser les exigences de ressources
        activities_with_req = 0
        total_requirements = 0
        for activity in instance.activities:
            req_sum = sum(activity.skill_requirements)
            if req_sum > 0:
                activities_with_req += 1
                total_requirements += req_sum
        
        print(f"üìä Activit√©s avec exigences: {activities_with_req}/{instance.num_activities}")
        print(f"üìä Total exigences: {total_requirements}")
        
        # Tester l'ordonnancement avec diff√©rents algorithmes
        algorithms = ["EST", "LFT", "MSLF", "SPT", "LPT", "FCFS", "LST"]
        results = {}
        
        print(f"\nüîç Test des algorithmes:")
        for alg in algorithms:
            try:
                makespan, schedule = scheduler.schedule_with_priority(alg)
                results[alg] = makespan
                activities_scheduled = len(schedule)
                print(f"  {alg:4s}: makespan={makespan:3d}, activit√©s={activities_scheduled:3d}/{instance.num_activities}")
            except Exception as e:
                results[alg] = float('inf')
                print(f"  {alg:4s}: ERREUR - {str(e)}")
        
        # Analyser les r√©sultats
        valid_results = [v for v in results.values() if v != float('inf')]
        if valid_results:
            unique_results = set(valid_results)
            print(f"\nüìà R√©sultats uniques: {len(unique_results)}")
            print(f"üìà Meilleur: {min(valid_results)}")
            print(f"üìà Pire: {max(valid_results)}")
            
            if len(unique_results) == 1:
                print("‚ö†Ô∏è  TOUS LES ALGORITHMES DONNENT LE M√äME R√âSULTAT!")
                print("   Causes possibles:")
                print("   - Instance trop contrainte (peu de libert√© d'ordonnancement)")
                print("   - Probl√®me dans l'algorithme de scheduling")
                print("   - Activit√©s dummy dominent le probl√®me")
        
        # Examiner une activit√© en d√©tail
        if instance.activities:
            print(f"\nüîç Exemple d'activit√© (ID 0):")
            act = instance.activities[0]
            print(f"  Dur√©e: {act.duration}")
            print(f"  Pr√©d√©cesseurs: {act.predecessors}")
            print(f"  Successeurs: {act.successors}")
            print(f"  Exigences: {act.skill_requirements}")
            print(f"  Earliest start: {act.earliest_start}")
            print(f"  Latest start: {act.latest_start}")
            print(f"  Slack: {act.slack}")
        
        # Examiner les ressources
        if instance.resources:
            print(f"\nüîç Exemple de ressource (ID 0):")
            res = instance.resources[0]
            print(f"  Comp√©tences: {res.skills}")
            print(f"  Niveaux: {res.skill_levels}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du diagnostic: {str(e)}")


def main():
    """Programme principal de diagnostic"""
    print("üî¨ DIAGNOSTIC DES INSTANCES MSRCPSP")
    print("=" * 60)
    
    instances_dir = "Instances"
    if not os.path.exists(instances_dir):
        print(f"‚ùå R√©pertoire {instances_dir} non trouv√©!")
        return
    
    # Prendre quelques instances probl√©matiques
    test_files = [
        "MSLIB_Set1_1000.msrcp",  # Tous donnent 4
        "MSLIB_Set1_1001.msrcp",  # Tous donnent 0
        "MSLIB_Set1_1003.msrcp",  # Tous donnent 21
        "MSLIB_Set1_101.msrcp",   # R√©sultats diff√©rents
        "MSLIB_Set1_1.msrcp"      # R√©sultats vari√©s
    ]
    
    for filename in test_files:
        filepath = os.path.join(instances_dir, filename)
        if os.path.exists(filepath):
            diagnose_instance_issue(filepath)
        else:
            print(f"‚ö†Ô∏è  Fichier {filename} non trouv√©")
    
    print(f"\n{'='*60}")
    print("üéØ RECOMMANDATIONS:")
    print("1. V√©rifier la logique de scheduling dans msrcpsp_final.py")
    print("2. Augmenter la diversit√© des r√®gles de priorit√©")
    print("3. Impl√©menter des heuristiques plus sophistiqu√©es")
    print("4. Ajouter de la randomisation pour briser les √©galit√©s")
    print("=" * 60)


if __name__ == "__main__":
    main()

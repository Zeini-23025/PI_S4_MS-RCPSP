#!/usr/bin/env python3
"""
Script principal pour ex√©cuter l'analyse compl√®te MS-RCPSP
Usage: python run_analysis.py
"""

import sys
import os

# Ajouter le r√©pertoire courant au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from makespan_calculator import MakespanCalculator
    from paste import parse_dzn_file, compute_temporal_metrics, MSRCPSPPriorityAlgorithms
except ImportError as e:
    print(f"Erreur d'import: {e}")
    print("Assurez-vous que tous les fichiers n√©cessaires sont pr√©sents:")
    print("  - makespan_calculator.py")
    print("  - paste.py (votre code des algorithmes)")
    sys.exit(1)


def check_directories():
    """V√©rifie que les r√©pertoires n√©cessaires existent"""
    required_dirs = ["./instances", "./resultats"]
    missing_dirs = []
    
    for directory in required_dirs:
        if not os.path.exists(directory):
            missing_dirs.append(directory)
    
    if missing_dirs:
        print("R√©pertoires manquants:")
        for directory in missing_dirs:
            print(f"  - {directory}")
        
        print("\nCr√©ation des r√©pertoires manquants...")
        for directory in missing_dirs:
            os.makedirs(directory, exist_ok=True)
            print(f"  ‚úì {directory} cr√©√©")


def run_priority_algorithms_first():
    """Ex√©cute d'abord les algorithmes de priorit√© si n√©cessaire"""
    print("V√©rification des r√©sultats des algorithmes de priorit√©...")
    
    # V√©rifier si les r√©sultats existent d√©j√†
    results_exist = False
    algorithms = ['HRPW*', 'LST', 'LFT', 'MTS', 'TIMROS', 'HRU1', 'TIMRES', 'HRU2', 'STFD', 'EFT']
    
    for algorithm in algorithms:
        algo_dir = os.path.join("./resultats", algorithm)
        if os.path.exists(algo_dir) and os.listdir(algo_dir):
            results_exist = True
            break
    
    if not results_exist:
        print("Aucun r√©sultat d'algorithme trouv√©. Ex√©cution des algorithmes de priorit√©...")
        
        # Importer et ex√©cuter le code principal des algorithmes
        try:
            import glob
            
            instances_dir = "./instances"
            dzn_files = glob.glob(os.path.join(instances_dir, "*.dzn"))
            
            if not dzn_files:
                print(f"Aucune instance .dzn trouv√©e dans {instances_dir}")
                print("Veuillez placer vos fichiers d'instances dans le r√©pertoire ./instances/")
                return False
            
            print(f"Traitement de {len(dzn_files)} instance(s)...")
            
            for dzn_file in dzn_files:
                instance_name = os.path.splitext(os.path.basename(dzn_file))[0]
                print(f"  Traitement: {instance_name}")
                
                try:
                    # Charger et traiter l'instance
                    instance_data = parse_dzn_file(dzn_file)
                    instance_data = compute_temporal_metrics(instance_data)
                    
                    # Cr√©er l'objet algorithmes
                    algorithms_obj = MSRCPSPPriorityAlgorithms(instance_data)
                    
                    # Obtenir tous les ordres de priorit√©
                    all_orders = algorithms_obj.get_all_priority_orders()
                    
                    # Sauvegarder les r√©sultats
                    for rule_name, activity_order in all_orders.items():
                        rule_dir = os.path.join("./resultats", rule_name)
                        os.makedirs(rule_dir, exist_ok=True)
                        
                        output_data = {
                            "instance": instance_name,
                            "rule": rule_name,
                            "n_activities": instance_data.get('nActs', 0),
                            "ordered_activities": activity_order,
                            "durations": instance_data.get('dur', [])
                        }
                        
                        output_file = os.path.join(rule_dir, f"{instance_name}.json")
                        import json
                        with open(output_file, 'w', encoding='utf-8') as f:
                            json.dump(output_data, f, indent=2, ensure_ascii=False)
                
                except Exception as e:
                    print(f"    Erreur: {e}")
                    continue
            
            print("Algorithmes de priorit√© ex√©cut√©s avec succ√®s!")
            return True
            
        except Exception as e:
            print(f"Erreur lors de l'ex√©cution des algorithmes: {e}")
            return False
    else:
        print("R√©sultats des algorithmes de priorit√© trouv√©s ‚úì")
        return True


def main():
    """Fonction principale"""
    print("="*60)
    print("ANALYSE COMPL√àTE MS-RCPSP")
    print("Calcul des makespans et comparaison des algorithmes")
    print("="*60)
    
    # V√©rifier les r√©pertoires
    check_directories()
    
    # Ex√©cuter les algorithmes de priorit√© si n√©cessaire
    if not run_priority_algorithms_first():
        print("Impossible de g√©n√©rer les r√©sultats des algorithmes de priorit√©.")
        print("V√©rifiez vos fichiers d'instances et r√©essayez.")
        return
    
    # Ex√©cuter l'analyse des makespans
    print("\n" + "="*60)
    print("CALCUL DES MAKESPANS")
    print("="*60)
    
    try:
        calculator = MakespanCalculator()
        calculator.run_complete_analysis()
        
        print("\n" + "="*60)
        print("ANALYSE TERMIN√âE AVEC SUCC√àS!")
        print("="*60)
        print("\nFichiers de r√©sultats g√©n√©r√©s dans ./resultats/")
        print("  üìä makespan_comparison.csv - Comparaison d√©taill√©e")
        print("  üìà summary_statistics.csv - Statistiques r√©sum√©es")
        print("  üìÅ makespan_details/ - R√©sultats d√©taill√©s par instance")
        
    except Exception as e:
        print(f"Erreur lors de l'analyse: {e}")
        import traceback
        traceback.print_exc()
        print("\nüí° Astuce :")
        print("  - V√©rifiez que vos fichiers JSON de r√©sultats contiennent bien des dictionnaires (avec .get),")
        print("    et non des listes. Un r√©sultat de type 'list' au lieu de 'dict' indique un probl√®me dans la g√©n√©ration des fichiers JSON.")
        print("  - L'erreur 'KeyError: Avg_Makespan' signifie que la colonne 'Avg_Makespan' est absente du DataFrame.")
        print("    V√©rifiez que les r√©sultats interm√©diaires sont bien calcul√©s et que les noms de colonnes sont corrects dans makespan_calculator.py.")


if __name__ == "__main__":
    main()